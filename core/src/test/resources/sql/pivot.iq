# pivot.iq - PIVOT and UNPIVOT clauses
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to you under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
!set outputformat mysql
!use scott

# TODO: Oracle allows "COUNT" to be unquoted: count

SELECT *
FROM   (SELECT deptno, job, sal
        FROM   emp)
PIVOT  (SUM(sal) AS sum_sal, COUNT(*) AS "COUNT"
        FOR (job) IN ('CLERK', 'MANAGER' mgr, 'ANALYST' AS "a"))
ORDER BY deptno;
+--------+-----------------+---------------+-------------+-----------+-----------+---------+
| DEPTNO | 'CLERK'_SUM_SAL | 'CLERK'_COUNT | MGR_SUM_SAL | MGR_COUNT | a_SUM_SAL | a_COUNT |
+--------+-----------------+---------------+-------------+-----------+-----------+---------+
|     10 |         1300.00 |             1 |     2450.00 |         1 |           |       0 |
|     20 |         1900.00 |             2 |     2975.00 |         1 |   6000.00 |       2 |
|     30 |          950.00 |             1 |     2850.00 |         1 |           |       0 |
+--------+-----------------+---------------+-------------+-----------+-----------+---------+
(3 rows)

!ok

# Oracle gives 'ORA-00918: column ambiguously defined'
SELECT *
FROM   (SELECT deptno, job, sal
        FROM   emp)
PIVOT  (SUM(sal) AS sum_sal, COUNT(*) AS sal
        FOR (job) IN ('CL' || 'ERK', 'MANAGER' mgr, 'ANALYST' AS "MGR_SUM",null))
ORDER BY deptno;
At line 1, column 8: Column 'MGR_SUM_SAL' is ambiguous
!error

!if (false) {
# Invalid column. (Because deptno is used in FOR, it is not available in ORDER BY.)
SELECT *
FROM (SELECT deptno, job, sal FROM emp)
PIVOT (SUM(sal) AS sum_sal FOR (deptno,job) IN (10,'CLERK'))
ORDER BY deptno;
!ok
!}

# Numeric axis without labels;
# note that 'SALESMAN' appears due to records in non-displayed departments.
SELECT *
FROM (SELECT job, deptno FROM emp)
PIVOT (COUNT(*) AS "COUNT" FOR deptno IN (10, 50, 20));
+-----------+----------+----------+----------+
| JOB       | 10_COUNT | 50_COUNT | 20_COUNT |
+-----------+----------+----------+----------+
| ANALYST   |        0 |        0 |        2 |
| CLERK     |        1 |        0 |        2 |
| MANAGER   |        1 |        0 |        1 |
| PRESIDENT |        1 |        0 |        0 |
| SALESMAN  |        0 |        0 |        0 |
+-----------+----------+----------+----------+
(5 rows)

!ok

# As above, with table alias and WHERE clause.
SELECT *
FROM (SELECT job, deptno FROM emp)
PIVOT (COUNT(*) AS "COUNT" FOR deptno IN (10, 50, 20)) AS e
WHERE e.job <> 'MANAGER';
+-----------+----------+----------+----------+
| JOB       | 10_COUNT | 50_COUNT | 20_COUNT |
+-----------+----------+----------+----------+
| ANALYST   |        0 |        0 |        2 |
| CLERK     |        1 |        0 |        2 |
| PRESIDENT |        1 |        0 |        0 |
| SALESMAN  |        0 |        0 |        0 |
+-----------+----------+----------+----------+
(4 rows)

!ok

# As above, with GROUP BY.
SELECT job, SUM("10_COUNT") AS sum10, SUM("20_COUNT" + "50_COUNT") AS sum20
FROM (SELECT job, deptno FROM emp)
PIVOT (COUNT(*) AS "COUNT" FOR deptno IN (10, 50, 20)) AS e
WHERE e.job <> 'MANAGER'
GROUP BY job;
+-----------+-------+-------+
| JOB       | SUM10 | SUM20 |
+-----------+-------+-------+
| ANALYST   |     0 |     2 |
| CLERK     |     1 |     2 |
| PRESIDENT |     1 |     0 |
| SALESMAN  |     0 |     0 |
+-----------+-------+-------+
(4 rows)

!ok

# Managers appear even though none of their rows pass filter
SELECT *
FROM (SELECT mgr, deptno, job, sal FROM emp)
PIVOT (SUM(sal) AS ss, COUNT(*) AS c
   FOR (job, deptno)
   IN (('CLERK', 20) AS c20, ('MANAGER', 10) AS m10))
ORDER BY 1 NULLS FIRST;
+------+---------+-------+---------+-------+
| MGR  | C20_SS  | C20_C | M10_SS  | M10_C |
+------+---------+-------+---------+-------+
|      |         |     0 |         |     0 |
| 7566 |         |     0 |         |     0 |
| 7698 |         |     0 |         |     0 |
| 7782 |         |     0 |         |     0 |
| 7788 | 1100.00 |     1 |         |     0 |
| 7839 |         |     0 | 2450.00 |     1 |
| 7902 |  800.00 |     1 |         |     0 |
+------+---------+-------+---------+-------+
(7 rows)

!ok

# Equivalent to above using FILTER
SELECT mgr,
  SUM(sal) FILTER (WHERE job = 'CLERK' AND deptno = 20) AS c20_ss,
  COUNT(*) FILTER (WHERE job = 'CLERK' AND deptno = 20) AS c20_c,
  SUM(sal) FILTER (WHERE job = 'MANAGER' AND deptno = 10) AS m10_ss,
  COUNT(*) FILTER (WHERE job = 'MANAGER' AND deptno = 10) AS m10_c
FROM emp
GROUP BY mgr
ORDER BY 1 NULLS FIRST;
+------+---------+-------+---------+-------+
| MGR  | C20_SS  | C20_C | M10_SS  | M10_C |
+------+---------+-------+---------+-------+
|      |         |     0 |         |     0 |
| 7566 |         |     0 |         |     0 |
| 7698 |         |     0 |         |     0 |
| 7782 |         |     0 |         |     0 |
| 7788 | 1100.00 |     1 |         |     0 |
| 7839 |         |     0 | 2450.00 |     1 |
| 7902 |  800.00 |     1 |         |     0 |
+------+---------+-------+---------+-------+
(7 rows)

!ok

# Equivalent to above using CASE
SELECT mgr,
  SUM(CASE WHEN job = 'CLERK' AND deptno = 20 THEN sal END) c20_ss,
  COUNT(CASE WHEN job = 'CLERK' AND deptno = 20 THEN 1 END) c20_c,
  SUM(CASE WHEN job = 'MANAGER' AND deptno = 10 THEN sal END) m10_ss,
  COUNT(CASE WHEN job = 'MANAGER' AND deptno = 10 THEN 1 END) m10_c
FROM emp
GROUP BY mgr
ORDER BY 1 NULLS FIRST;
+------+---------+-------+---------+-------+
| MGR  | C20_SS  | C20_C | M10_SS  | M10_C |
+------+---------+-------+---------+-------+
|      |         |     0 |         |     0 |
| 7566 |         |     0 |         |     0 |
| 7698 |         |     0 |         |     0 |
| 7782 |         |     0 |         |     0 |
| 7788 | 1100.00 |     1 |         |     0 |
| 7839 |         |     0 | 2450.00 |     1 |
| 7902 |  800.00 |     1 |         |     0 |
+------+---------+-------+---------+-------+
(7 rows)

!ok

# Null values are not matched (dept 10 has one employee whose mgr is null)
# This behavior is consistent with Oracle, but not Teradata.
SELECT *
FROM (SELECT deptno, mgr FROM   emp)
PIVOT (COUNT(*) AS c FOR mgr IN (7839, null, 7698))
ORDER BY deptno;
+--------+--------+--------+--------+
| DEPTNO | 7839_C | NULL_C | 7698_C |
+--------+--------+--------+--------+
|     10 |      1 |      0 |      0 |
|     20 |      1 |      0 |      0 |
|     30 |      1 |      0 |      5 |
+--------+--------+--------+--------+
(3 rows)

!ok

# Duplicate axes are OK
SELECT *
FROM   (SELECT job, deptno FROM emp)
PIVOT  (COUNT(*) AS c FOR (deptno,deptno) IN ((10,10), (30,20)));
+-----------+---------+---------+
| JOB       | 10_10_C | 30_20_C |
+-----------+---------+---------+
| ANALYST   |       0 |       0 |
| CLERK     |       1 |       0 |
| MANAGER   |       1 |       0 |
| PRESIDENT |       1 |       0 |
| SALESMAN  |       0 |       0 |
+-----------+---------+---------+
(5 rows)

!ok

!if (false) {
# Char literal coerced to DATE type
SELECT *
FROM (select hiredate, sal from emp)
PIVOT (SUM(sal) FOR hiredate IN ('1981-12-03', '1981-11-17'));
'03-DEC-81' '17-NOV-81'
3950 5000
!ok

# Char literals cast to DATE explicitly
# BigQuery gives pivot columns "_2018_01_01", "_2018_01_02"
# Oracle gives pivot columns "'03-DEC-81' AS date)", "'17-NOV-81'"
SELECT *
FROM (SELECT hiredate, sal FROM emp)
PIVOT (SUM(sal) FOR hiredate IN (CAST('1981-12-03' AS DATE), '1981-11-17'));
'03-DEC-81' '17-NOV-81'
3950 5000
!ok
!}

# Identical pivot values.
# BigQuery gives pivot columns: "_10", "_10", "_20".
# Oracle gives pivot columns "10", "10", "20";
# throws 'ORA-00918: column ambiguously defined' if you use 'SELECT *'.
SELECT "20"
FROM (SELECT deptno, sal FROM emp)
PIVOT (SUM(sal) FOR (deptno) IN (10, 10, 20));
+----------+
| 20       |
+----------+
| 10875.00 |
+----------+
(1 row)

!ok

# Identical pivot values with explicit aliases.
SELECT *
FROM (SELECT deptno, sal FROM emp)
PIVOT (SUM(sal) FOR (deptno) IN (10, 10 as ten, 20));
+---------+---------+----------+
| 10      | TEN     | 20       |
+---------+---------+----------+
| 8750.00 | 8750.00 | 10875.00 |
+---------+---------+----------+
(1 row)

!ok

# Different pivot values generating an identical name
# Oracle throws 'ORA-00918: column ambiguously defined'
SELECT *
FROM (SELECT sal, deptno FROM emp)
PIVOT (SUM(sal) AS b_c, COUNT(*) AS c FOR deptno IN (10 as a, 20 as a_b));
At line 1, column 8: Column 'A_B_C' is ambiguous
!error

# As previous, but choosing the unambiguous columns
SELECT a_c, a_b_b_c
FROM (SELECT sal, deptno FROM emp)
PIVOT (SUM(sal) AS b_c, COUNT(*) AS c FOR deptno IN (10 as a, 20 as a_b));
+-----+----------+
| A_C | A_B_B_C  |
+-----+----------+
|   3 | 10875.00 |
+-----+----------+
(1 row)

!ok

# Multiple pivot expressions, one with alias, one without
# (Note that we cast empno as integer to avoid overflow in sum.)
SELECT *
FROM (SELECT sal, CAST(empno as integer) as empno, deptno FROM emp)
PIVOT (SUM(sal), SUM(empno) AS sum_empno FOR deptno IN (10, 20));
+---------+--------------+----------+--------------+
| 10      | 10_SUM_EMPNO | 20       | 20_SUM_EMPNO |
+---------+--------------+----------+--------------+
| 8750.00 |        23555 | 10875.00 |        38501 |
+---------+--------------+----------+--------------+
(1 row)

!ok

# Multiple pivot expressions, one with alias, two without alias
SELECT *
FROM (SELECT sal, empno, deptno FROM emp)
PIVOT (SUM(sal), COUNT(*), SUM(empno) AS sum_empno FOR deptno IN (10, 20));
At line 1, column 8: Column '10' is ambiguous
!error

# As above, choosing the unambiguous columns
SELECT "10_SUM_EMPNO"
FROM (SELECT sal, empno, deptno FROM emp)
PIVOT (SUM(sal), COUNT(*), SUM(empno) AS sum_empno FOR deptno IN (10, 20));
+--------------+
| 10_SUM_EMPNO |
+--------------+
|        23555 |
+--------------+
(1 row)

!ok

# Expression as argument to aggregate function.
SELECT * FROM (SELECT sal, deptno, job, mgr FROM Emp)
PIVOT (sum(sal + deptno + 1)
   FOR job in ('CLERK' AS c, 'ANALYST' AS a));
+------+---------+---------+
| MGR  | C       | A       |
+------+---------+---------+
| 7566 |         | 6042.00 |
| 7698 |  981.00 |         |
| 7782 | 1311.00 |         |
| 7788 | 1121.00 |         |
| 7839 |         |         |
| 7902 |  821.00 |         |
|      |         |         |
+------+---------+---------+
(7 rows)

!ok

# Sample PIVOT query
SELECT *
FROM (
 SELECT deptno, job, sal,
   CASE WHEN ename < 'F' THEN 'F' ELSE 'M' END AS gender
 FROM emp)
PIVOT (sum(sal) AS ss, count(*) AS c
     FOR (job, deptno) IN (('CLERK', 10) AS C10,
                           ('CLERK', 20) AS C20,
                           ('ANALYST', 20) AS A20));
+--------+---------+-------+---------+-------+---------+-------+
| GENDER | C10_SS  | C10_C | C20_SS  | C20_C | A20_SS  | A20_C |
+--------+---------+-------+---------+-------+---------+-------+
| F      |         |     0 | 1100.00 |     1 |         |     0 |
| M      | 1300.00 |     1 |  800.00 |     1 | 6000.00 |     2 |
+--------+---------+-------+---------+-------+---------+-------+
(2 rows)

!ok

# This was the input
SELECT CASE WHEN ename < 'F' THEN 'F' ELSE 'M' END AS gender,
    deptno, job, sal
FROM emp
WHERE (job, deptno) IN (('CLERK', 10), ('CLERK', 20), ('ANALYST', 20))
ORDER BY gender, deptno, job;
+--------+--------+---------+---------+
| GENDER | DEPTNO | JOB     | SAL     |
+--------+--------+---------+---------+
| F      |     20 | CLERK   | 1100.00 |
| M      |     10 | CLERK   | 1300.00 |
| M      |     20 | ANALYST | 3000.00 |
| M      |     20 | ANALYST | 3000.00 |
| M      |     20 | CLERK   |  800.00 |
+--------+--------+---------+---------+
(5 rows)

!ok

# Unpivot it
!if (false) {
SELECT *
FROM (
  SELECT *
  FROM (
     SELECT deptno, job, sal,
       CASE WHEN ename < 'F' THEN 'F' ELSE 'M' END AS gender
     FROM emp)
  PIVOT (sum(sal) AS ss, count(*) AS c
         FOR (job, deptno)
         IN (('CLERK', 10) AS C10,
             ('CLERK', 20) AS C20,
             ('ANALYST', 20) AS A20)))
UNPIVOT (
  (sum_sal, count_star)
  FOR (job, deptno)
  IN ((c10_ss, c10_c) AS ('CLERK', 10),
      (c20_ss, c20_c) AS ('CLERK', 20),
      (a20_ss, a20_c) AS ('ANALYST', 20)));

+--------+---------+--------+---------+------------+
| GENDER | JOB     | DEPTNO | SUM_SAL | COUNT_STAR |
+--------+---------+--------+---------+------------+
| F      | ANALYST |     20 |         |          0 |
| F      | CLERK   |     10 |         |          0 |
| F      | CLERK   |     20 | 1100.00 |          1 |
| M      | ANALYST |     20 | 6000.00 |          2 |
| M      | CLERK   |     10 | 1300.00 |          1 |
| M      | CLERK   |     20 |  800.00 |          1 |
+--------+---------+--------+---------+------------+
(6 rows)

!ok
!}

# Unpivot long-hand
SELECT e.gender,
    t.job,
    t.deptno,
    CASE
      WHEN t.job = 'CLERK' AND t.deptno = 10 THEN c10_ss
      WHEN t.job = 'CLERK' AND t.deptno = 20 THEN c20_ss
      WHEN t.job = 'ANALYST' AND t.deptno = 20 THEN a20_ss
    END AS sum_sal,
    CASE
      WHEN t.job = 'CLERK' AND t.deptno = 10 THEN c10_c
      WHEN t.job = 'CLERK' AND t.deptno = 20 THEN c20_c
      WHEN t.job = 'ANALYST' AND t.deptno = 20 THEN a20_c
    END AS count_star
FROM (
  SELECT *
  FROM (
    SELECT deptno, job, sal,
        CASE WHEN ename < 'F' THEN 'F' ELSE 'M' END AS gender
    FROM emp)
  PIVOT (sum(sal) AS ss, count(*) AS c
     FOR (job, deptno) IN (('CLERK', 10) AS C10,
                           ('CLERK', 20) AS C20,
                           ('ANALYST', 20) AS A20))) AS e
CROSS JOIN (VALUES ('CLERK', 10),
                   ('CLERK', 20),
                   ('ANALYST', 20)) AS t (job, deptno);
+--------+---------+--------+---------+------------+
| GENDER | JOB     | DEPTNO | SUM_SAL | COUNT_STAR |
+--------+---------+--------+---------+------------+
| F      | ANALYST |     20 |         |          0 |
| F      | CLERK   |     10 |         |          0 |
| F      | CLERK   |     20 | 1100.00 |          1 |
| M      | ANALYST |     20 | 6000.00 |          2 |
| M      | CLERK   |     10 | 1300.00 |          1 |
| M      | CLERK   |     20 |  800.00 |          1 |
+--------+---------+--------+---------+------------+
(6 rows)

!ok

# Single measure; include nulls; IN has duplicate columns and duplicate values
!if (false) {
SELECT *
FROM (
  SELECT *
  FROM (
     SELECT deptno, job, sal,
       CASE WHEN ename < 'F' THEN 'F' ELSE 'M' END AS gender
     FROM emp)
  PIVOT (sum(sal) AS ss, count(*) AS c
         FOR (job, deptno)
         IN (('CLERK', 10) AS C10,
             ('CLERK', 20) AS C20,
             ('ANALYST', 20) AS A20)))
UNPIVOT INCLUDE NULLS (
  (sum_sal)
  FOR (job, deptno)
  IN ((c10_ss) AS ('CLERK', 10),
      (c20_ss) AS ('CLERK', 20),
      (c20_ss) AS ('CLERK', 20),
      (c10_ss) AS ('ANALYST', 20)));

GENDER	C10_C	C20_C	A20_SS	A20_C	JOB	DEPTNO	SUM_SAL
M	1	1	6000	2	CLERK	10	1300
M	1	1	6000	2	CLERK	20	800
M	1	1	6000	2	CLERK	20	800
M	1	1	6000	2	ANALYST	20	1300
F	0	1	(null)	0	CLERK	10	(null)
F	0	1	(null)	0	CLERK	20	1100
F	0	1	(null)	0	CLERK	20	1100
F	0	1	(null)	0	ANALYST	20	(null)
!ok
!}

# End pivot.iq
